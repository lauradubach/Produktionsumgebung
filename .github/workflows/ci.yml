name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run Tests
        run: |
          echo "Running unit tests... This will take about 60 seconds."
          python -m pytest

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Image
        run: |
          docker build -f Dockerfile.prod --pull -t ${{ secrets.REGISTRY_IMAGE }}:latest .
          docker push ${{ secrets.REGISTRY_IMAGE }}:latest

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_TARGET }} >> ~/.ssh/known_hosts

      - name: Upload Docker Compose File
        run: |
          scp compose.prod.yaml ${{ secrets.DEPLOY_TARGET_USER }}@${{ secrets.DEPLOY_TARGET }}:/home/${{ secrets.DEPLOY_TARGET_USER }}/compose_blueprint_flask.yaml

      - name: Deploy via SSH
        run: |
          ssh ${{ secrets.DEPLOY_TARGET_USER }}@${{ secrets.DEPLOY_TARGET }} << 'EOF'
            cd /home/${{ secrets.DEPLOY_TARGET_USER }}

            # Set environment variables in .env
            sed -i '/^FLASK_BLUEPRINT_IMAGE=/d' .env || true
            echo "FLASK_BLUEPRINT_IMAGE=${{ secrets.REGISTRY_IMAGE }}:latest" >> .env

            sed -i '/^DB_ROOT_PASSWORD=/d' .env || true
            echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env

            docker login -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_PASSWORD }} ghcr.io

            docker compose -f compose_blueprint_flask.yaml pull
            docker compose -f compose_blueprint_flask.yaml up -d
          EOF