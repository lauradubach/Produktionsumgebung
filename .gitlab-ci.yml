stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

unit-test-job:
    stage: test    # It only starts when the job in the build stage completes successfully.
    image: python:3.12
    before_script:
        - pip install -r requirements.txt
        - pip install pytest
    script:
        - echo "Running unit tests... This will take about 60 seconds."
        - python -m pytest

build-job:
    image: docker:cli
    stage: build
    services:
        - docker:dind
    variables:
        DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    before_script:
        - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
    # Default branch is also tagged with `latest`
    script:
        - docker build --pull -t "$DOCKER_IMAGE_NAME" .
        - docker push "$DOCKER_IMAGE_NAME"
        - |
            if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
                docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
                docker push "$CI_REGISTRY_IMAGE:latest"
            fi
        # Run this job in a branch where a Dockerfile exists
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy-job:
    stage: deploy
    image: alpine
    before_script:
        # install envsubst and ssh-add
        - apk add gettext openssh-client
    script:
        # start ssh-agent and import ssh private key
        - eval `ssh-agent`
        - ssh-add <(echo "$SSH_PRIVATE_KEY")
        # add server to list of known hosts
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - touch ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
        - echo $SSH_HOST_KEY >> ~/.ssh/known_hosts
        - echo "HOST *" > ~/.ssh/config
        - echo "StrictHostKeyChecking no" >> ~/.ssh/config
        # upload docker-compose to the server
        - scp compose.prod.yaml ec2-user@$DEPLOY_TARGET:/home/ec2-user/compose.yaml
        - ssh ec2-user@$DEPLOY_TARGET "cd /home/ec2-user; 
            docker login -u $CI_REGISTRY_USER 
                -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
            docker compose up -d"
    rules:
        # only deploy if new commit on main-branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

