stages:
  - test
  - build
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  DOCKER_TLS_CERTDIR: ""

test-job:
  image: python:3.10.10-alpine
  stage: test
  before_script:
    - echo "Installiere Abhängigkeiten und führe Tests aus"
    - pip install -r requirements.txt
    - pip install pytest responses pytest-cov
  script:
    - python3 -m pytest --cov=app
 
build-job:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST -f Dockerfile.prod .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:latest -f Dockerfile.prod .
    - docker push $CI_REGISTRY_IMAGE:latest
 
deploy-job:
    stage: deploy
    image: alpine
    before_script:
        # install envsubst and ssh-add
        - apk add gettext openssh-client
    script:
        # start ssh-agent and import ssh private key
        - eval `ssh-agent`
        - ssh-add <(echo "$SSH_PRIVATE_KEY")
        # add server to list of known hosts
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - touch ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
        - echo $SSH_HOST_KEY >> ~/.ssh/known_hosts
        - echo "HOST *" > ~/.ssh/config
        - echo "StrictHostKeyChecking no" >> ~/.ssh/config
        # upload docker-compose file to the server
        - scp compose.prod.yaml $DEPLOY_TARGET_USER@$DEPLOY_TARGET:/home/$DEPLOY_TARGET_USER/compose_blueprint_flask.yaml
        # pull newest images from registry and start them
        - ssh $DEPLOY_TARGET_USER@$DEPLOY_TARGET "cd /home/$DEPLOY_TARGET_USER;
            sed -i '/^FLASK_BLUEPRINT_IMAGE=/d' .env;
            echo \"FLASK_BLUEPRINT_IMAGE=$CI_REGISTRY_IMAGE:latest\" >> .env || exit 1;
            sed -i '/^DB_ROOT_PASSWORD=/d' .env;
            echo \"DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD\" >> .env || exit 1;
            docker login -u $CI_REGISTRY_USER 
                -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
            docker compose -f compose_blueprint_flask.yaml pull;
            docker compose -f compose_blueprint_flask.yaml up -d"
    rules:
        # only deploy if new commit on main-branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH