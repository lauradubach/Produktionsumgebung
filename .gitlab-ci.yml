stages:
  - test
  - build
  - deploy
 
test-job:
  stage: test
  image: python:3.10.10-alpine
  script:
    - python --version  # Überprüft, ob Python installiert ist
    - pip install -r requirements.txt  # Installiert Abhängigkeiten (falls nötig)
    - pytest tests/  # Führt Tests aus
  only:
    - main
 
build-job:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
 
deploy-job:
  stage: deploy
  image: alpine
  before_script:
    - apk add gettext openssh-client
  script:
    - eval `ssh-agent`
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - touch ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
    - echo $SSH_HOST_KEY >> ~/.ssh/known_hosts
    - echo "HOST *" > ~/.ssh/config
    - echo "StrictHostKeyChecking no" >> ~/.ssh/config
    - scp compose.prod.yaml $DEPLOY_TARGET_USER@$DEPLOY_TARGET:/home/$DEPLOY_TARGET_USER/compose_blueprint_flask.yaml
    - ssh $DEPLOY_TARGET_USER@$DEPLOY_TARGET "cd /home/$DEPLOY_TARGET_USER;
        sed -i '/^FLASK_BLUEPRINT_IMAGE=/d' .env;
        echo \"FLASK_BLUEPRINT_IMAGE=$CI_REGISTRY_IMAGE:latest\" >> .env || exit 1;
        sed -i '/^DB_ROOT_PASSWORD=/d' .env;
        echo \"DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD\" >> .env || exit 1;
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
        docker compose -f compose_blueprint_flask.yaml pull;
        docker compose -f compose_blueprint_flask.yaml up -d"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH